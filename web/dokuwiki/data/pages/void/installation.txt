====== Installation ======

<WRAP center round important 60%>
This section is incomplete and needs further work!
</WRAP>

===== Environment Preparation =====

  - Gain system access:<cli>
> root
> voidlinux
# bash
</cli>
  - Set console keymap and font:<cli>
# loadkeys us
# setfont eurlatgr
# unicode_start
</cli>
  -  Disable system beeping (pcspkr module):<cli>
# lsmod | grep pcspkr && modprobe -r pcspkr
</cli>
  - Verify UEFI and remount UEFI NVRAM as read only((Read-write efivarfs issue: https://github.com/systemd/systemd/issues/2402.)):<cli>
# ls -ld /sys/firmware/efi/
# mount -o remount,ro efivarfs
</cli>
  - Set system time:<cli>
# date [-u] <MMDDhhmmCCYY.ss>
# hwclock --systohc
</cli>
  - Verify network connectivity.
  - Update live environment system and install additional packages:<cli>
# xbps-install -Su[y] xbps ; xbps-install -Su[y]
# xbps-install [-y] parted
</cli>

===== Disk Preparation =====

  - Create partitions:<cli>
# cfdisk -z </dev/sdX>
cfdisk> gpt
cfdisk> n
cfdisk> 2GiB
cfdisk> t
cfdisk> EFI System
cfdisk> n
cfdisk>  (Enter)
cfdisk> W
cfdisk> yes
cfdisk> q
# parted -s </dev/sdX> name 1 ESP
# parted -s </dev/sdX> name 2 VOID
</cli>
  - Create filesystems: 
    - EFI filesystem:<cli>
# wipefs -a </dev/sdX1>
# mkfs.vfat -F 32 </dev/sdX1>
# fatlabel </dev/sdX1> ESP
# fatlabel -i </dev/sdX1> 00000001
# fsck.vfat </dev/sdX1> ; echo $?
</cli>
    - LUKS encrypted filesystem:<cli>
# dd if=/dev/urandom of=</dev/sdX2> status=progress ; sync
# wipefs -a </dev/sdX2>
# cryptsetup luksFormat --type luks2 --force-password -y </dev/sdX2>
> YES
> <NEW-LUKS-PASSWORD>
> <NEW-LUKS-PASSWORD (VERIFY)>
# cryptsetup config --label LUKS-VOID </dev/sdX2>
# cryptsetup luksUUID --uuid 00000000-0000-0000-0000-000000000002 </dev/sdX2>
> YES
# cryptsetup open --type luks2 </dev/sdX2> luks-void
> <LUKS-PASSWORD>
</cli>
    - Root filesystem((Status of btrfs in linux: https://btrfs.wiki.kernel.org/index.php/Status.)):<cli>
# wipefs -a /dev/mapper/luks-void
# mkfs.btrfs /dev/mapper/luks-void
# btrfs filesystem label /dev/mapper/luks-void VOID-ROOT
# btrfstune -U 00000000-0000-0000-0000-000000000003 /dev/mapper/luks-void
> y
# btrfs check /dev/mapper/luks-void ; echo $?
</cli>
  - Verify partitions and filesystems:<cli>
# parted -s </dev/sdX> [unit B] p free
# lsblk -fp </dev/sdX>
</cli>
  - Create btrfs subvolume(s):<cli>
# mkdir -p /mnt/void/
# mount /dev/mapper/luks-void /mnt/void/
# btrfs subvolume create /mnt/void/@
# umount /mnt/void/
</cli>
  - Mount filesystems:
    - Btrfs((Btrfs mount options: https://btrfs.readthedocs.io/en/latest/Administration.html#mount-options.)) subvolume:<cli>
# mount -o defaults,noatime,compress=zstd:3,commit=120,subvol=@ /dev/mapper/luks-void /mnt/void/
</cli>
    - ESP:<cli>
# mkdir -p /mnt/void/boot/
# mount </dev/sda1> /mnt/void/boot/
</cli>

===== Base System Installation =====

  - Instal minimal base system packages:<cli>
# xbps-install -S[y] -R https://repo-default.voidlinux.org/current -r /mnt/void/ base-minimal
> y
</cli>

===== Chroot =====

  - Copy DNS configuration:<cli>
# cp -L /etc/resolv.conf /mnt/void/etc/
</cli>
  - Mount filesystems:<cli>
# mount --rbind /dev/ /mnt/void/dev/
# mount --rbind /sys/ /mnt/void/sys/
# mount --rbind /proc/ /mnt/void/proc/
# mount --rbind /run/ /mnt/void/run/
# mount --make-rslave /mnt/void/dev/
# mount --make-rslave /mnt/void/sys/
# mount --make-rslave /mnt/void/proc/
# mount --make-rslave /mnt/void/run/
</cli>
  - Chroot into the new installation:<cli>
# chroot /mnt/void/ /bin/sh
# . ./etc/profile
# export PS1='(chroot) # '
</cli>

===== Full System Installation =====

  - Install additional repositories((Void subrepositories: https://docs.voidlinux.org/xbps/repositories/index.html#subrepositories.)) and synchronize them:<cli>
(chroot) # xbps-install void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree
(chroot) # xbps-install -Su xbps ; xbps-install -Su
</cli>
  - Partitioning tools:<cli>
(chroot) # xbps-install parted cryptsetup dosfstools e2fsprogs btrfs-progs
</cli>
  - System tools:<cli>
(chroot) # xpbs-install kbd kmod eudev ncurses less
</cli>
  - Administration tools:<cli>
(chroot) # xbps-install mdocml man-pages tealdeer neovim git curl file tree ncdu psmisc htop btop neofetch inxi
</cli>
  - Boot tools((Void microcode: https://docs.voidlinux.org/config/firmware.html#microcode.)):<cli>
(chroot) # xbps-install grub-x86_64-efi dracut-uefi linux linux-lts linux-firmware [intel-ucode]
</cli>
  - Network tools:
    - Basic:<cli>
(chroot) # xbps-install iproute2 dhcpcd iputils bind-utils inetutils-whois mtr nmap
</cli>
    - Ethernet:<cli>
(chroot) # xbps-install ethtool
</cli>
    - Wi-Fi((Iwconfig replaced by iw: https://wireless.wiki.kernel.org/en/users/Documentation/iw/replace-iwconfig.)):<cli>
(chroot) # xbps-install wavemon iw wpa_supplicant
</cli>

===== Swap File =====

  - Allocate space on COW filesystem (such as btrfs):<cli>
(chroot) # truncate -s 0 /swap
(chroot) # chattr +C /swap
(chroot) # fallocate -l 4G /swap
(chroot) # chmod 0600 /swap
</cli>
  - Set file as swap area:<cli>
(chroot) # mkswap /swap
(chroot) # swapon /swap
</cli>

===== System Configuration =====

==== XBPS ====

  - Set ignored packages by XBPS:<file text /etc/xbps.d/ignore.conf>
## AUTHOR:       AISK11
## LOCATION:     /etc/xbps.d/ignore.conf (0644 root:root)
## DEPENDENCIES: xbps
## DESCRIPTION:  Ignore XBPS packages when required as dependencies.

## Ignore nvi (replaced by neovim).
ignorepkg=nvi

## Ignore sudo (replaced by opendaos).
ignorepkg=sudo
</file>
  - Uninstall unneeded packages:<cli>
(chroot) # xbps-remove -Ro nvi
</cli>

==== Filesystems ====

  - Configure crypttab:<file text /etc/crypttab>
## AUTHOR:       AISK11
## LOCATION:     /etc/crypttab (0644 root:root)
## DEPENDENCIES: base-files
## DESCRIPTION:  Encrypted partition mapping table.

## <MAPPER-NAME> <DEVICE> <PASSWORD-FILE> <OPTIONS>
luks-void UUID=00000000-0000-0000-0000-000000000002 none luks
</file>
  - Configure fstab:<file text /etc/fstab>
## AUTHOR:       AISK11
## LOCATION:     /etc/fstab (0644 root:root)
## DEPENDENCIES: base-files
## DESCRIPTION:  Filesytem table.

## <FILE-SYSTEM> <MOUNT-DIR> <TYPE> <OPTIONS> <DUMP> <PASS>
LABEL=VOID-ROOT     /                         btrfs    defaults,noatime,compress=zstd:3,commit=120,subvol=@ 0 0
LABEL=ESP           /boot                     vfat     defaults,noatime,umask=0077                          0 1
/swap               none                      swap     defaults,nofail                                      0 0
#efivarfs            /sys/firmware/efi/efivars efivarfs ro,nosuid,nodev,noexec,relatime                      0 0

## To mount efivarfs as RO in runit, edit
## '/etc/runit/core-services/00-pseudofs.sh'.
</file>

==== Kernel Modules ====

  - Set blacklisted kernel modules on startup:<file text /etc/modprobe.d/blacklist.conf>
## AUTHOR:       AISK11
## LOCATION:     /etc/modprobe.d/blacklist.conf (0644 root:root)
## DEPENDENCIES: kmod
## DESCRIPTION:  List of blacklisted kernel modules on startup.

## Blacklist pcspkr (system beeping).
blacklist pcspkr
</file>

==== Locales ====

  - Set locales to be generated by system:<file text /etc/default/libc-locales>
...
C.UTF-8 UTF-8
...
en_US.UTF-8 UTF-8
en_US ISO-8859-1
...
</file>
  - Generate locales:<cli>
(chroot) # xbps-reconfigure -f glibc-locales
</cli>
  - Set system locales:<file text /etc/locale.conf>
## AUTHOR:       AISK11
## LOCATION:     /etc/locale.conf (0644 root:root)
## DEPENDENCIES: runit-void glibc-locales
## DESCRIPTION:  System locales.

LANG='C.UTF-8'
</file>

==== Timezone ====

  - Create symlink to UTC timezone:<cli>
(chroot) # ln -sf /usr/share/zoneinfo/UTC /etc/localtime
</cli>

==== Runit ====

  - Set void configuration run by runit:<file text /etc/rc.conf>
## AUTHOR:       AISK11
## LOCATION:     /etc/rc.conf (0644 root:root)
## DEPENDENCIES: runit-void tzdata kbd
## DESCRIPTION:  Void system configuration run by runit on stages 1 and 3.

## Set hostname (recommended to set in '/etc/hostname' instead).
#HOSTNAME='voidlinux'

## Set RTC to use UTC or localtime (localtime is inconsistent for DST).
HARDWARECLOCK='UTC'

## Set timezone (recommended to set symlink '/etc/localtime' >
## '/usr/share/zoneinfo/<TIMEZONE>').
#TIMEZONE="UTC"

## Set console keymap (keymaps are in '/usr/share/kbd/keymaps/').
KEYMAP='us'

## Set console font (fonts are in '/usr/share/kbd/consolefonts/').
FONT='eurlatgr'
#FONT_MAP=''
#FONT_UNIMAP=''

## Set amount of ttys.
#TTYS=''

## Set mode for cgroup mounts.
## - hybrid:  mount cgroup v1 in '/sys/fs/cgroup/' and cgroup v2 under
##            '/sys/fs/cgroup/unified/'.
## - legacy:  mount cgroup v1 in '/sys/fs/cgroup/'.
## - unified: mount cgroup v2 in '/sys/fs/cgroup/'.
CGROUP_MODE='hybrid'

## Set this to true only if you do not want seed files to actually credit the
## RNG, for example if you plan to replicate this file system image and do not
## have the wherewithal to first delete the contents of '/var/lib/seedrng'.
SEEDRNG_SKIP_CREDIT='false'
</file>
  - Mount efivars as read-only to protect UEFI NVRAM:<file bash /etc/runit/core-services/00-pseudofs.sh>
...
if [ -d /sys/firmware/efi/efivars ]; then
    mountpoint -q /sys/firmware/efi/efivars || mount -o ro,nosuid,noexec,nodev -t efivarfs efivarfs /sys/firmware/efi/efivars
fi
...
</file>

==== Hostname ====

  - Set hostname:<cli>
(chroot) # echo '<HOSTNAME>' > /etc/hostname
</cli>

===== Booting =====

==== Initramfs ====

  - Configure initramfs:<file text /etc/dracut.conf.d/10-crypt.conf>
## AUTHOR:       AISK11
## LOCATION:     /etc/dracut.conf.d/10-crypt.conf (0644 root:root)
## DEPENDENCIES: dracut-uefi
## DESCRIPTION:  Initramfs generation rules.

## Support encrypted partitions.
install_items+='/etc/crypttab'
hostonly='yes'
</file>

==== Bootloader ====

  - Install bootloader to ESP:<cli>
(chroot) # grub-install --target=x86_64-efi --efi-directory=/boot/ --removable
(chroot) # mount -o remount,rw efivarfs
(chroot) # grub-install --target=x86_64-efi --efi-directory=/boot/ --bootloader-id=GRUB
(chroot) # mount -o remount,ro efivarfs
</cli>
  - Configure custom bootloader hook:<file bash /etc/grub.d/40_custom>
#!/usr/bin/env sh

## AUTHOR:       AISK11
## LOCATION:     /etc/grub.d/40_custom (0755 root:root)
## DEPENDENCIES: grub-x86_64-efi
## DESCRIPTION:  Bootloader hook.

## Required line.
exec tail -n +3 "${0}"

## Custom menu entries.
menuentry 'Reboot Computer' --class restart {
    reboot
}

menuentry 'Shutdown Computer' --class shutdown {
    halt
}
</file><cli>
(chroot) # chmod 0755 /etc/grub.d/40_custom
</cli>
  - Configure bootloader((GRUB2 config options: https://www.gnu.org/software/grub/manual/grub/html_node/Simple-configuration.html.)): <file text /etc/default/grub>
## AUTHOR:       AISK11
## LOCATION:     /etc/default/grub (0644 root:root)
## DEPENDENCIES: grub-x86_64-efi
## DESCRIPTION:  Bootloader configuration.

## Apply changes made to this file with:
## $(grub-mkconfig -o /boot/grub/grub.cfg)

## OS name.
GRUB_DISTRIBUTOR='Void'

## Default menu entry.
GRUB_DEFAULT='0'
GRUB_SAVEDEFAULT='false'

## Time to boot default entry unless key is pressed.
GRUB_TIMEOUT='-1'
GRUB_TIMEOUT_STYLE='menu'

## Do not generate recovery mode entries.
GRUB_DISABLE_RECOVERY='true'

## Terminal input devices.
GRUB_TERMINAL_INPUT='console'

## Terminal output.
GRUB_GFXMODE='auto'
GRUB_GFXPAYLOAD_LINUX='text'

## Enable encrypted disks.
GRUB_ENABLE_CRYPTODISK='y'

## Kernel parameters.
GRUB_CMDLINE_LINUX=''
GRUB_CMDLINE_LINUX_DEFAULT='cryptdevice=LABEL=LUKS-VOID:luks-void net.ifnames=0 quiet'

## Bootloader colors (fg/bg).
GRUB_COLOR_NORMAL='white/black'
GRUB_COLOR_HIGHLIGHT='white/black'

## Disable nested entries.
GRUB_DISABLE_SUBMENU='true'

## Bootloader theme.
#GRUB_THEME=''
</file>
  - Apply bootloader configuration changes:<cli>
(chroot) # grub-mkconfig -o /boot/grub/grub.cfg
</cli>

===== Finishing =====

  - Reconfigure all packages:<cli>
(chroot) # xbps-reconfigure -fa
</cli>
  - Make root account accessible: <cli>
(chroot) # passwd root
> <NEW-ROOT-PASSWORD>
> <NEW-ROOT-PASSWORD (VERIFY)>
</cli>
  - Reboot system:<cli>
(chroot) # exit
# reboot
</cli>