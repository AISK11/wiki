====== Installation ======

===== Environment Preparation =====

  - Gain system access:<cli>
> root
> voidlinux
# bash
</cli>
  - Set console keymap and font:<cli>
# loadkeys us
# setfont eurlatgr
# unicode_start
</cli>
  -  Disable system beeping (pcspkr module):<cli>
# modprobe -r pcspkr
</cli>
  - Verify UEFI boot and mount efivars as read-only to protect UEFI NVRAM:<cli>
# ls -ld /sys/firmware/efi/
# mount -t efivarfs -o ro efivarfs /sys/firmware/efi/efivars/
</cli>
  - Verify internet connectivity. See [[void:network|Network]].
  - Update live environment system and install additional packages:<cli>
# xbps-install -Su xbps && xbps-install -Su
# xbps-install parted
</cli>

===== Disk Partitioning =====

  - Create partitions:<cli>
# cfdisk -z </dev/sdX>
cfdisk> gpt
cfdisk> n
cfdisk> 2GiB
cfdisk> t
cfdisk> EFI System
cfdisk> n
cfdisk>  (Enter)
cfdisk> W
cfdisk> yes
cfdisk> q
# parted -s </dev/sdX> name 1 ESP
# parted -s </dev/sdX> name 2 LUKS
</cli>
  - Create filesystems: 
    - EFI filesystem:<cli>
# wipefs -a </dev/sdX1>
# mkfs.vfat -F 32 </dev/sdX1>
# fatlabel </dev/sdX1> ESP
# fatlabel -i </dev/sdX1> 00000001
# fsck.vfat </dev/sdX1> ; echo $?
</cli>
    - LUKS encrypted filesystem:<cli>
# dd if=/dev/urandom of=</dev/sdX2> status=progress ; sync
# wipefs -a </dev/sdX2>
# cryptsetup luksFormat -y --type luks2 </dev/sdX2>
> YES
> <NEW_LUKS_PASSWORD>
> <NEW_LUKS_PASSWORD (VERIFY)>
# cryptsetup config --label LUKS </dev/sdX2>
# cryptsetup luksUUID --uuid 00000000-0000-0000-0000-000000000002 </dev/sdX2>
> YES
# cryptsetup open --type luks2 </dev/sdX2> luks-root
> <LUKS_PASSWORD>
</cli>
    - Root filesystem:<cli>
# wipefs -a /dev/mapper/luks-root
# mkfs.btrfs /dev/mapper/luks-root
# btrfs filesystem label /dev/mapper/luks-root LUKS-ROOT
# btrfstune -U 00000000-0000-0000-0000-000000000003 /dev/mapper/luks-root
> y
# btrfs check /dev/mapper/luks-root ; echo $?
</cli>
  - Verify partitions and filesystems:<cli>
# parted -s </dev/sdX> [unit B] p free
# lsblk -fp </dev/sdX>
</cli>

===== Base System Installation =====

  - Create mount points and mount filesystems:<cli>
# mkdir -p /mnt/void/
# mount /dev/mapper/luks-root /mnt/void/
# mkdir -p /mnt/void/boot/
# mount </dev/sdX1> /mnt/void/boot/
</cli>
  - Copy xbps signing keys:<cli>
# mkdir -p /mnt/void/var/db/xbps/keys/
# xbps-query -f xbps | grep '/var/db/xbps/keys/' | xargs -I {} cp {} /mnt/void/var/db/xbps/keys/
</cli>
  - Instal minimal base system packages:<cli>
# xbps-install -S -R https://repo-default.voidlinux.org/current -r /mnt/void/ base-minimal
</cli>

===== Chroot =====

  - Mount filesystems:<cli>
# mount --rbind /dev/ /mnt/void/dev/
# mount --rbind /sys/ /mnt/void/sys/
# mount --rbind /proc/ /mnt/void/proc/
# mount --rbind /run/ /mnt/void/run/
# mount --make-rslave /mnt/void/dev/
# mount --make-rslave /mnt/void/sys/
# mount --make-rslave /mnt/void/proc/
# mount --make-rslave /mnt/void/run/
</cli>
  - Copy DNS configuration:<cli>
# cp /etc/resolv.conf /mnt/void/etc/
</cli>
  - Chroot into the new installation:<cli>
# chroot /mnt/void/ /bin/sh
# . ./etc/profile
# export PS1='(chroot) # '
</cli>

----

===== Full System Installation =====

  - Install additional void subrepositories((Void subrepositories: https://docs.voidlinux.org/xbps/repositories/index.html#subrepositories.)) and synchronize them:<cli>
# xbps-install void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree
# xbps-install -Su xbps && xbps-install -Su
</cli>
  - Partitioning tools:<cli>
# xbps-install parted cryptsetup dosfstools e2fsprogs btrfs-progs
</cli>
  - System tools:<cli>
# xpbs-install kbd kmod eudev acpid ncurses less
</cli>
  - Administration tools:<cli>
# xbps-install mdocml man-pages neovim git file tree ncdu psmisc htop btop neofetch inxi
</cli>
  - Shell tools:<cli>
# xbps-install zsh zsh-autosuggestions zsh-completions zsh-syntax-highlighting
</cli>
  - Boot tools:<cli>
# xbps-install efibootmgr grub-x86_64-efi mkinitcpio-encrypt linux linux-lts
</cli>
  - Network tools:
    - Basic:<cli>
# xbps-install iproute2 iputils dhcpcd unbound nftables
</cli>
    - Ethernet:<cli>
# xbps-install ethtool
</cli>
    - Wi-Fi:<cli>
# xbps-install wpa_supplicant iw [wifi-firmware]
</cli>
===== Swap File =====

  - Allocate space on COW filesystem (such as btrfs):<cli>
(chroot) # truncate -s 0 /swap
(chroot) # chattr +C /swap
(chroot) # fallocate -l 4G /swap
(chroot) # chmod 0600 /swap
</cli>
  - Set file as swap area:<cli>
(chroot) # mkswap /swap
(chroot) # swapon /swap
</cli>

===== System Configuration =====

===== Finishing =====