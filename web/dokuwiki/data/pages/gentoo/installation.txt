====== Installation ======

<WRAP center round important 60%>
This section is incomplete and needs further work!
</WRAP>

===== Environment Preparation =====

  - Set console keymap and font:<cli>
# loadkeys us
# setfont eurlatgr
# unicode_start
</cli>
  - Verify UEFI and remount UEFI NVRAM as read only((Read-write efivarfs problem: https://github.com/systemd/systemd/issues/2402.)):<cli>
# ls -ld /sys/firmware/efi/
# mount -o remount,ro efivarfs
</cli>

===== Configure Network =====

==== Ethernet ====

==== Wi-Fi ====

===== Disk Preparation =====

  - Create partitions:<cli>
# cfdisk -z </dev/sdX>
cfdisk> gpt
cfdisk> n
cfdisk> 2GiB
cfdisk> t
cfdisk> EFI System
cfdisk> n
cfdisk>  (Enter)
cfdisk> W
cfdisk> yes
cfdisk> q
# parted -s </dev/sdX> name 1 ESP
# parted -s </dev/sdX> name 2 GENTOO
</cli>
  - Create filesystems: 
    - EFI filesystem:<cli>
# wipefs -a </dev/sdX1>
# mkfs.vfat -F 32 </dev/sdX1>
# fatlabel </dev/sdX1> ESP
# fatlabel -i </dev/sdX1> 00000001
# fsck.vfat </dev/sdX1> ; echo $?
</cli>
    - LUKS encrypted filesystem:<cli>
# dd if=/dev/urandom of=</dev/sdX2> status=progress ; sync
# wipefs -a </dev/sdX2>
# cryptsetup luksFormat --force-password --type luks2 </dev/sdX2>
> YES
> <NEW-LUKS-PASSWORD>
> <NEW-LUKS-PASSWORD (VERIFY)>
# cryptsetup config --label LUKS-GENTOO </dev/sdX2>
# cryptsetup luksUUID --uuid 00000000-0000-0000-0000-000000000002 </dev/sdX2>
> YES
# cryptsetup open --type luks2 </dev/sdX2> luks-gentoo
> <LUKS-PASSWORD>
</cli>
    - Root filesystem((Status of btrfs in linux: https://btrfs.wiki.kernel.org/index.php/Status.)):<cli>
# wipefs -a /dev/mapper/luks-gentoo
# mkfs.btrfs /dev/mapper/luks-gentoo
# btrfs filesystem label /dev/mapper/luks-gentoo GENTOO
# btrfstune -U 00000000-0000-0000-0000-000000000003 /dev/mapper/luks-gentoo
> y
# btrfs check /dev/mapper/luks-gentoo ; echo $?
</cli>
  - Verify partitions and filesystems:<cli>
# parted -s </dev/sdX> [unit B] p free
# lsblk -fp </dev/sdX>
</cli>
  - Create btrfs subvolume(s):<cli>
# mount /dev/mapper/luks-gentoo /mnt/gentoo/
# btrfs subvolume create /mnt/gentoo/@
# umount /mnt/gentoo/
</cli>
  - Mount filesystems:
    - Btrfs((Btrfs mount options: https://btrfs.readthedocs.io/en/latest/Administration.html#mount-options.)) subvolume:<cli>
# mount -o noatime,compress=zstd:3,commit=120,subvol=@ /dev/mapper/luks-gentoo /mnt/gentoo/
</cli>
    - ESP:<cli>
# mkdir -p /mnt/gentoo/boot/
# mount </dev/sda1> /mnt/gentoo/boot/
</cli>

===== Stage 3 =====

  - Prepare download:
    - Set date manually:<cli>
# date [-u] <MMDDhhmmCCYY.ss>
# hwclock --systohc
</cli>
    - Go to mounted new root directory:<cli>
# cd /mnt/gentoo/
</cli>
  - Download stage 3 files:
    - Navigate to gentoo website:<cli>
# links https://www.gentoo.org/downloads/mirrors
</cli>
    - Navigate to ''<MIRROR>/releases/amd64/autobuilds/current-stage3-amd64-openrc/''.
    - Download (with <kbd>D</kbd> key): 
      - ''stage3-amd64-openrc-<CCYYMMDDThhmmssZ>.tar.xz''
      - ''stage3-amd64-openrc-<CCYYMMDDThhmmssZ>.tar.xz.DIGESTS''
  - Verify stage 3 files:
    - Import Gentoo PGP key((Gentoo signatures: https://www.gentoo.org/downloads/signatures.)):<cli>
# gpg --keyserver hkps://keys.gentoo.org --recv-keys 13EBBDBEDE7A12775DFDB1BABB572E0E2D182910
</cli>
    - Verify authenticity and integrity:<cli>
# gpg --verify ./stage3-amd-64-openrc-<CCYYMMDDhhmmZ>.tar.xz.DIGESTS
# sha512sum -c --ignore-missing ./stage3-amd-64-openrc-<CCYYMMDDhhmmZ>.tar.xz.DIGESTS ./stage3-amd-64-openrc-<CCYYMMDDhhmmZ>.tar.xz
</cli>
  - Unpack stage 3:<cli>
# tar xpvf ./stage3-amd-64-openrc-<CCYYMMDDhhmmZ>.tar.xz --xattrs-include='*.*' --numeric-owner
</cli>
  - Clean:<cli>
# rm -f ./stage3-amd-64-openrc-<CCYYMMDDhhmmZ>.tar.xz ./stage3-amd-64-openrc-<CCYYMMDDhhmmZ>.tar.xz.DIGESTS
</cli>

===== Compile Options =====

  - Find system nubmer of threads and RAM size (in bytes):<cli>
# nproc
# vmstat -s -S b | head -n 1 | grep -o '[0-9]*'
</cli>
  - Configure compiling options((Handbook for make.conf: https://wiki.gentoo.org/wiki//etc/portage/make.conf.))((Manpage for make.conf: https://dev.gentoo.org/~zmedico/portage/doc/man/make.conf.5.html.))((Configuration example for make.conf: https://github.com/gentoo/portage/blob/master/cnf/make.conf.example.))((Compilation flags: https://wiki.gentoo.org/wiki/Safe_CFLAGS.))((MAKEOPTS compilation options: https://wiki.gentoo.org/wiki/MAKEOPTS.))((Emerge options: https://wiki.gentoo.org/wiki/EMERGE_DEFAULT_OPTS.))((Emerge manpage: https://wiki.gentoo.org/wiki/Full_manpages/emerge.))((Portage niceness: https://wiki.gentoo.org/wiki/Portage_niceness.))((Licenses: https://wiki.gentoo.org/wiki/License_groups))((Per-packages licenes: https://wiki.gentoo.org/wiki//etc/portage/package.license.))((Global USE flags: https://packages.gentoo.org/useflags/global.))((All USE flags: https://www.gentoo.org/support/use-flags)):<file text /mnt/gentoo/etc/portage/make.conf>
## AUTHOR:       AISK11
## LOCATION:     /etc/portage/make.conf (0644 root:root)
## DEPENDENCIES: sys-apps/portage
## DESCRIPTION:  Global portage configuration file.

## Per-package config: '/etc/portage/package.use/'.
## See all variables: $(emerge --info -v).

## Number of parallel compilations. Use smaller value between CPU and RAM.
## - Amount of CPU threads (find with $(nproc)).
## - RAM / 2 GiB (find with $(vmstat -s -S b | head -n 1 | grep -o '[0-9]*').
PC='4'

## Load average (should be ${PC}+1).
LA='5'

## Compilation flags for C, C++, FORTRAN 77 and FORTRAN languages.
COMMON_FLAGS='-march=native -O2 -pipe'
CFLAGS="${COMMON_FLAGS}"
CXXFLAGS="${COMMON_FLAGS}"
FFLAGS="${COMMON_FLAGS}"
FCFLAGS="${COMMON_FLAGS}"

## Amount of parallel make (compilation) jobs.
MAKEOPTS="-j${PC} -l${LA}"

## Entries to append to emerge command.
EMERGE_DEFAULT_OPTS='--keep-going=y --with-bdeps=y --ask-enter-invalid'

## Actions that portage takes.
FEATURES='sandbox strict strict-keepdir collision-protect cgroup \
 parallel-install distcc noinfo candy'

## Allow portage to use only idle system resources.
PORTAGE_SCHEDULING_POLICY='idle'

## Accept only FSF licensed software. Specify exceptions in
## '/etc/portage/package.license'.
ACCEPT_LICENSE="-* @FREE"

## Portage directories.
PORTDIR='/var/db/repos/gentoo'
DISTDIR='/var/cache/distfiles'
PKGDIR='/var/cache/binpkgs'

## English language for build output.
LC_MESSAGES='C'

## Global software USE flags ((https://packages.gentoo.org/useflags/global)).
## - System.
USE="${USE} -systemd -emacs -xemacs -themes -bash-completion python multilib ncurses \
 xattr lm-senosrs dbus udev elogind man git zsh-completion"

## - Security.
USE="${USE} -telemetry hardened apparmor argon2 crypt"

## - Network.
USE="${USE} -zeroconf bluetooth wifi ipv6 ssl vnc rdp samba"

## - DE & WM.
USE="${USE} -gnome -gnome-keyring -kde -plasma wayland X tray gtk libnotify \
 inotify"

## - Multimedia.
USE="${USE} fontconfig truetype xft unicode cjk svg png jpeg exif mp3 flac mp4"

## - Nvidia.
USE="${USE} nvenc"
</file>

===== Mirrors & Ebuild Repo =====

  - Select mirror(s):<cli>
# mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf
</cli>
  - Set up gentoo ebuild repository:<cli>
# mkdir -p /mnt/gentoo/etc/portage/repos.conf/
# cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf
</cli>

===== Chroot =====

  - Copy DNS info:<cli>
# cp -L /etc/resolv.conf /mnt/gentoo/etc/
</cli>
  - Mount pseudo filesystems:<cli>
# mount --rbind /dev/ /mnt/gentoo/dev/
# mount --rbind /sys/ /mnt/gentoo/sys/
# mount --rbind /proc/ /mnt/gentoo/proc/
# mount --rbind /run/ /mnt/gentoo/run/
# mount --make-rslave /mnt/gentoo/dev/
# mount --make-rslave /mnt/gentoo/sys/
# mount --make-rslave /mnt/gentoo/proc/
# mount --make-rslave /mnt/gentoo/run/
</cli>
  - Enter chroot:<cli>
# chroot /mnt/gentoo/ /bin/[ba]sh
# . ./etc/profile
# export PS1="(chroot) ${PS1}"
</cli>

===== System Recompilation =====

  - Download daily ebuild repository snapshot:<cli>
(chroot) # emerge-webrsync
</cli>
  - Update ebuild repository to the altest version:<cli>
(chroot) # emerge --sync
</cli>
  - Read update news and delete them afterwards:<cli>
(chroot) # eselect news list
(chroot) # eselect news read [N] | less
(chroot) # eselect news purge [N]
</cli>
  - Select right profile (''default/linux/amd64/<VERSION> (stable)''):<cli>
(chroot) # eselect profile list
(chroot) # eselect profile set <N>
</cli>
  - Update @world set:<cli>
(chroot) # emerge -avuDN @world
</cli>