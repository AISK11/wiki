====== Installation (server) ======

<WRAP center round important 60%>
This section is incomplete and needs further work!
</WRAP>

===== Prepare Environment =====

  - Gain system access: <cli>
> root
> voidlinux
</cli>
  - Change shell to bash: <cli>
# bash
</cli>
  -Set keymap and font (temporarily): <cli>
# loadkeys us
# setfont eurlatgr
# unicode_start
</cli>
  - Disable system beeping: <cli>
# modprobe -r pcspkr
</cli>
  - Verify UEFI boot and mount efivars as read-only to protect UEFI NVRAM: <cli>
# ls -ld /sys/firmware/efi/
# mount -t efivarfs -o ro efivarfs /sys/firmware/efi/efivars/
</cli>
  - Make sure, there is internet connectivity.
  - Update live environment system and install additional packages: <cli>
# xbps-install -Su xbps && xbps-install -Su
# xbps-install parted
</cli>

===== Disk Preparation =====

  - Create EFI and empty partition. <cli>
# cfdisk -z </dev/sdX>
cfdisk> gpt
cfdisk> n
cfdisk> 2GiB
cfdisk> t
cfdisk> EFI System
cfdisk> n
cfdisk>  (Enter)
cfdisk> W
cfdisk> yes
cfdisk> q
# parted -s </dev/sdX> name 1 ESP
# parted -s </dev/sdX> name 2 ROOT
</cli>
  - Create EFI filesystem: <cli>
# wipefs -a </dev/sdX1>
# mkfs.vfat -F 32 </dev/sdX1>
# fatlabel </dev/sdX1> ESP
# fatlabel -i </dev/sdX1> 00000001
# fsck.vfat </dev/sdX1> ; echo $?
</cli>
  - Create root filesystem: <cli>
# wipefs -a </dev/sdX2>
# mkfs.btrfs </dev/sdX2>
# btrfs filesystem label </dev/sdX2> ROOT
# btrfstune -U 00000000-0000-0000-0000-000000000002 </dev/sdX2>
> y
# btrfs check </dev/sdX2> ; echo $?
</cli>

===== Base System Installation =====

  - Create mount points and mount filesystems: <cli>
# mkdir -p /mnt/void/
# mount </dev/sdX2> /mnt/void/
# mkdir -p /mnt/void/boot/
# mount </dev/sdX1> /mnt/void/boot/
</cli>
  - Copy xbps signing keys: <cli>
# mkdir -p /mnt/void/var/db/xbps/keys/
# xbps-query -f xbps | grep '/var/db/xbps/keys/' | xargs -I {} cp {} /mnt/void/var/db/xbps/keys/
</cli>
  - Instal minimal base system packages: <cli>
# xbps-install -S -R https://repo-default.voidlinux.org/current -r /mnt/void/ base-minimal
</cli>

===== Chroot =====

  - Mount filesystems: <cli>
# mount --rbind /dev/ /mnt/void/dev/
# mount --rbind /sys/ /mnt/void/sys/
# mount --rbind /proc/ /mnt/void/proc/
# mount --rbind /run/ /mnt/void/run/
# mount --make-rslave /mnt/void/dev/
# mount --make-rslave /mnt/void/sys/
# mount --make-rslave /mnt/void/proc/
# mount --make-rslave /mnt/void/run/
</cli>
  - Copy DNS configuration: <cli>
# cp /etc/resolv.conf /mnt/void/etc/
</cli>
  - Chroot into the new installation: <cli>
# chroot /mnt/void/ /bin/sh
# . ./etc/profile
# export PS1='(chroot) # '
</cli>

----

===== Clone Git Settings =====

  - Clone git settings: <cli>
(chroot) # git clone https://github.com/AISK11/void ~/void/
</cli>
===== Bootloader =====

  - Install rEFInd: <cli>
(chroot) # xbps-install refind
</cli>
  - Prepare boot partition: <cli>
(chroot) # mkdir -p /boot/EFI/BOOT/
</cli>
  - Set rEFInd files: <cli>
(chroot) # cp /usr/share/refind/refind_x64.efi /boot/EFI/BOOT/
(chroot) # cp /boot/EFI/BOOT/refind_x64.efi /boot/EFI/BOOT/BOOTX64.EFI
(chroot) # cp -r /usr/share/refind/icons/ /usr/share/refind/fonts/ /boot/EFI/BOOT/
(chroot) # mkdir -p /boot/EFI/BOOT/themes/
</cli>
  - Add rEFInd to UEFI NVRAM: <cli>
(chroot) # mount -o remount,rw /sys/firmware/efi/efivars
(chroot) # efibootmgr -c -d </dev/sdX> -p 1 -l '/EFI/BOOT/refind_x64.efi' -L 'rEFInd'
(chroot) # mount -o remount,ro /sys/firmware/efi/efivars
</cli>

===== Full System Installation =====

<WRAP center round important 60%>
This section is incomplete and needs further work!
</WRAP>

1. Install additional void repositories and synchronize them:

<cli>
# xbps-install void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree
# xbps-install -Su
</cli>

2. Install partitioning and filesystem tools:

<cli>
(chroot) # xbps-install parted dosfstools e2fsprogs btrfs-progs
</cli>

3. Install configuration related packages:

<cli>
(chroot) # xbps-install kbd tzdata kmod git
</cli>

4. Install text editor:

<cli>
(chroot) # xbps-install neovim
</cli>

5. Install basic commands:

<cli>
(chroot) # xbps-install ncurses less 
</cli>

6. Install file related software:

<cli>
(chroot) # xbps-install file tree ncdu
</cli>

7. Install process related software:

<cli>
(chroot) # xbps-install psmisc htop neofetch inxi fcron
</cli>

8. Install shells:

<cli>
(chroot) # xbps-install bash zsh zsh-autosuggestions zsh-syntax-highlighting zsh-completions
</cli>

9. Install privilege escalation software:

<cli>
(chroot) # xbps-install opendoas
</cli>

10. Install manual pages:

<cli>
(chroot) # xbps-install man-db man-pages
</cli>

<WRAP center round todo 60%>
Find out which packages are gonna be used to boot and establish internet connection.
</WRAP>

11. Install boot software:

<cli>
(chroot) # xbps-install refind ?dracut-uefi? linux-lts linux-firmware
</cli>

12. Install network packages:

<cli>

</cli>

iputils dhcpcd ethtool (wpa_supplicant) nftables ntpclient iproute2

===== Configure Booting =====

<WRAP center round important 60%>
This section is incomplete and needs further work!
</WRAP>

1. Prepare boot partition:

<cli>
(chroot) # mkdir -p /boot/EFI/BOOT/
</cli>

2. Set rEFInd files:

<cli>
(chroot) # cp /usr/share/refind/refind_x64.efi /boot/EFI/BOOT/
(chroot) # cp /boot/EFI/BOOT/refind_x64.efi /boot/EFI/BOOT/BOOTX64.EFI
(chroot) # cp /usr/share/refind/icons/ /usr/share/refind/fonts/ /boot/EFI/BOOT/
(chroot) # mkdir -p /boot/EFI/BOOT/themes/
</cli>

3. Add rEFInd to UEFI NVRAM:

<cli>
(chroot) # mount -o remount,rw /sys/firmware/efi/efivars
(chroot) # efibootmgr -c -d </dev/sdX> -p 1 -l '/EFI/BOOT/refind_x64.efi' -L 'rEFInd'
(chroot) # mount -o remount,ro /sys/firmware/efi/efivars
</cli>

===== Swap File =====

1. Allocate space on COW filesystem (such as btrfs):

<cli>
(chroot) # truncate -s 0 /swap
(chroot) # chattr +C /swap
(chroot) # fallocate -l 4G /swap
(chroot) # chmod 0600 /swap
</cli>

2. Set file as swap area:

<cli>
(chroot) # mkswap /swap
(chroot) # swapon /swap
</cli>

===== System Configuration =====

1. Clone git settings:

<cli>
(chroot) # git clone https://github.com/AISK11/void ~/void/
</cli>

2. Set up XBPS files:

<cli>
(chroot) # cp ~/void/amd64/server/configfiles/xbps/ignore.conf /etc/xbps.d/
</cli>

3. Set up partition and filesystem files:

<cli>
(chroot) # cp ~/void/amd64/server/configfiles/base-files/crypttab /etc/
(chroot) # cp ~/void/amd64/server/configfiles/base-files/fstab /etc/
</cli>

4. Set up machine name files:

<cli>
(chroot) # cp ~/void/amd64/server/configfiles/runit-void/hostname /etc/
(chroot) # cp ~/void/amd64/server/configfiles/base-files/hosts /etc/
(chroot) # cp ~/void/amd64/server/configfiles/base-files/issue /etc/
</cli>

5. Set up locales and console keymap + font:

<cli>
(chroot) # cp ~/void/amd64/server/configfiles/glibc-locales/libc-locales /etc/default/
(chroot) # cp ~/void/amd64/server/configfiles/runit-void/locale.conf /etc/
(chroot) # cp ~/void/amd64/server/configfiles/runit-void/rc.conf /etc/
(chroot) # xbps-reconfigure -f glibc-locales
</cli> 

6. Set up timezone:

<cli>
(chroot) # cp -P ~/void/amd64/server/configfiles/tzdata/localtime /etc/
</cli>

7. Set up blacklisted modules:

<cli>
(chroot) # cp ~/void/amd64/server/configfiles/kmod/blacklist.conf /etc/modprobe.d/
</cli>

8. Set up user privilege files:

<cli>
(chroot) # cp ~/void/amd64/server/configfiles/opendoas/doas.conf /etc/
</cli>

===== Users & Permissions =====

1. Make root accessible:

<cli>
(chroot) # passwd root
> <NEW-ROOT-PASSWORD>
> <NEW-ROOT-PASSWORD (VERIFY)>
</cli>

2. Create privileged group:

<cli>
(chroot) # groupadd doas
</cli>

3. Create privileged user:

<cli>
(chroot) # useradd -m -k /dev/null <USER>
(chroot) # usermod -aG doas <USER>
(chroot) # passwd <USER>
> <NEW-USER-PASSWORD>
> <NEW-USER-PASSWORD (VERIFY)>
</cli>

===== Finishing =====

<WRAP center round important 60%>
This section is incomplete and needs further work!
</WRAP>

(chroot) # xbps-reconfigure -fa
(chroot) # exit
# shutdown -r now