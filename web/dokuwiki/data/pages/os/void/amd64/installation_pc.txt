====== Installation (PC) ======

<WRAP center round important 60%>
This section is incomplete and needs further work!
</WRAP>

===== Prepare Environment =====

  - Gain system access: <cli>
> root
> voidlinux
</cli>
  - Change shell to bash: <cli>
# bash
</cli>
  -Set keymap and font (temporarily): <cli>
# loadkeys us
# setfont eurlatgr
# unicode_start
</cli>
  - Disable system beeping: <cli>
# modprobe -r pcspkr
</cli>
  - Verify UEFI boot and mount efivars as read-only to protect UEFI NVRAM: <cli>
# ls -ld /sys/firmware/efi/
# mount -t efivarfs -o ro efivarfs /sys/firmware/efi/efivars/
</cli>
  - Make sure, there is internet connectivity.
  - Update live environment system and install additional packages: <cli>
# xbps-install -Su xbps && xbps-install -Su
# xbps-install parted
</cli>

===== Disk Preparation =====

  - Create EFI and empty partition. <cli>
# cfdisk -z </dev/sdX>
cfdisk> gpt
cfdisk> n
cfdisk> 2GiB
cfdisk> t
cfdisk> EFI System
cfdisk> n
cfdisk>  (Enter)
cfdisk> W
cfdisk> yes
cfdisk> q
# parted -s </dev/sdX> name 1 ESP
# parted -s </dev/sdX> name 2 LUKS
</cli>
  - Create EFI filesystem: <cli>
# wipefs -a </dev/sdX1>
# mkfs.vfat -F 32 </dev/sdX1>
# fatlabel </dev/sdX1> ESP
# fatlabel -i </dev/sdX1> 00000001
# fsck.vfat </dev/sdX1> ; echo $?
</cli>
  - Encrypt empty partition with LUKS: <cli>
# wipefs -a </dev/sdX2>
# cryptsetup luksFormat -y --type luks2 </dev/sdX2>
> YES
> <NEW_LUKS_PASSWORD>
> <NEW_LUKS_PASSWORD (VERIFY)>
# cryptsetup config --label LUKS </dev/sdX2>
# cryptsetup luksUUID --uuid 00000000-0000-0000-0000-000000000002 </dev/sdX2>
> YES
# cryptsetup open --type luks2 </dev/sdX2> luks-root
> <LUKS_PASSWORD>
</cli>
  - Create root filesystem on encrypted partition: <cli>
# wipefs -a /dev/mapper/luks-root
# mkfs.btrfs /dev/mapper/luks-root
# btrfs filesystem label /dev/mapper/luks-root LUKS-ROOT
# btrfstune -U 00000000-0000-0000-0000-000000000003 /dev/mapper/luks-root
> y
# btrfs check /dev/mapper/luks-root ; echo $?
</cli>
===== Base System Installation =====

  - Create mount points and mount filesystems: <cli>
# mkdir -p /mnt/void/
# mount /dev/mapper/luks-root /mnt/void/
# mkdir -p /mnt/void/boot/
# mount </dev/sdX1> /mnt/void/boot/
</cli>
  - Copy xbps signing keys: <cli>
# mkdir -p /mnt/void/var/db/xbps/keys/
# xbps-query -f xbps | grep '/var/db/xbps/keys/' | xargs -I {} cp {} /mnt/void/var/db/xbps/keys/
</cli>
  - Instal minimal base system packages: <cli>
# xbps-install -S -R https://repo-default.voidlinux.org/current -r /mnt/void/ base-minimal
</cli>

===== Chroot =====

  - Mount filesystems: <cli>
# mount --rbind /dev/ /mnt/void/dev/
# mount --rbind /sys/ /mnt/void/sys/
# mount --rbind /proc/ /mnt/void/proc/
# mount --rbind /run/ /mnt/void/run/
# mount --make-rslave /mnt/void/dev/
# mount --make-rslave /mnt/void/sys/
# mount --make-rslave /mnt/void/proc/
# mount --make-rslave /mnt/void/run/
</cli>
  - Copy DNS configuration: <cli>
# cp /etc/resolv.conf /mnt/void/etc/
</cli>
  - Chroot into the new installation: <cli>
# chroot /mnt/void/ /bin/sh
# . ./etc/profile
# export PS1='(chroot) # '
</cli>

----

===== Full System Installation =====

  - Install additional void repositories and synchronize them: <cli>
# xbps-install void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree
# xbps-install -Su
</cli>
  - Install partitioning and filesystem tools: <cli>
(chroot) # xbps-install parted dosfstools cryptsetup e2fsprogs btrfs-progs
</cli>
  - Install configuration related packages: <cli>
(chroot) # xbps-install kbd tzdata kmod git
</cli>
  - Install text editor: <cli>
(chroot) # xbps-install neovim
</cli>
  - Install basic commands: <cli>
(chroot) # xbps-install ncurses less 
</cli>
  - Install file related software: <cli>
(chroot) # xbps-install file tree ncdu
</cli>
  - Install process related software: <cli>
(chroot) # xbps-install psmisc htop neofetch inxi fcron
</cli>
  - Install shells: <cli>
(chroot) # xbps-install bash zsh zsh-autosuggestions zsh-syntax-highlighting zsh-completions
</cli>
  - Install privilege escalation software: <cli>
(chroot) # xbps-install opendoas
</cli>
  - Install manual pages: <cli>
(chroot) # xbps-install man-db man-pages
</cli>

<WRAP center round todo 60%>
Find out which packages are gonna be used to boot and establish internet connection.
</WRAP>

11. Install boot software:

<cli>
(chroot) # xbps-install refind linux linux-lts linux-firmware [intel-ucode] [linux-firmware-amd]
</cli>

12. Install network packages:

<cli>

</cli>

iputils dhcpcd ethtool (wpa_supplicant) nftables ntpclient iproute2

===== System Configuration =====

===== Bootloader =====


