====== Installation ======

===== Environment Preparation =====

  - Set console keymap and font: <cli>
# loadkeys us
# setfont eurlatgr
# unicode_start
</cli>
  - Disable system beeping (pcspkr module): <cli>
# modprobe -r pcspkr
</cli>
  - Verify UEFI boot and remount efivars as read-only to protect UEFI NVRAM((Read-write efivarfs problem: https://github.com/systemd/systemd/issues/2402.)): <cli>
# ls -ld /sys/firmware/efi/
# mount -o remount,ro /sys/firmware/efi/efivars/
</cli>
  - Verify internet connectivity.

===== Disk Partitioning =====

  - Create partitions: <cli>
# cfdisk -z </dev/sdX>
cfdisk> gpt
cfdisk> n
cfdisk> 2GiB
cfdisk> t
cfdisk> EFI System
cfdisk> n
cfdisk>  (Enter)
cfdisk> W
cfdisk> yes
cfdisk> q
# parted -s </dev/sdX> name 1 ESP
# parted -s </dev/sdX> name 2 LUKS
</cli>
  - Create filesystems: 
    - EFI filesystem: <cli>
# wipefs -a </dev/sdX1>
# mkfs.vfat -F 32 </dev/sdX1>
# fatlabel </dev/sdX1> ESP
# fatlabel -i </dev/sdX1> 00000001
# fsck.vfat </dev/sdX1> ; echo $?
</cli>
    - LUKS encrypted filesystem: <cli>
# wipefs -a </dev/sdX2>
# cryptsetup luksFormat -y --type luks2 </dev/sdX2>
> YES
> <NEW_LUKS_PASSWORD>
> <NEW_LUKS_PASSWORD (VERIFY)>
# cryptsetup config --label LUKS </dev/sdX2>
# cryptsetup luksUUID --uuid 00000000-0000-0000-0000-000000000002 </dev/sdX2>
> YES
# cryptsetup open --type luks2 </dev/sdX2> luks-root
> <LUKS_PASSWORD>
</cli>
    - Root filesystem: <cli>
# wipefs -a /dev/mapper/luks-root
# mkfs.btrfs /dev/mapper/luks-root
# btrfs filesystem label /dev/mapper/luks-root LUKS-ROOT
# btrfstune -U 00000000-0000-0000-0000-000000000003 /dev/mapper/luks-root
> y
# btrfs check /dev/mapper/luks-root ; echo $?
</cli>

===== Base System Installation =====

  -  Create mount point and mount root filesystem: <cli>
# mkdir -p /mnt/arch/
# mount /dev/mapper/luks-root /mnt/arch/
</cli>
  - Install base packages and mount ESP: <cli>
# pacstrap /mnt/arch/ base neovim git
# mount </dev/sdX1> /mnt/arch/boot/
</cli>

===== Chroot =====

  - Mount filesystems: <cli>
# mount --rbind /dev/ /mnt/arch/dev/
# mount --rbind /sys/ /mnt/arch/sys/
# mount --rbind /proc/ /mnt/arch/proc/
# mount --rbind /run/ /mnt/arch/run/
# mount --make-rslave /mnt/arch/dev/
# mount --make-rslave /mnt/arch/sys/
# mount --make-rslave /mnt/arch/proc/
# mount --make-rslave /mnt/arch/run/
</cli>
  - Copy DNS configuration: <cli>
# cp /etc/resolv.conf /mnt/arch/etc/
</cli>
  - Chroot into new installation: <cli>
# chroot /mnt/arch/ /bin/sh
# . ./etc/profile
# export PS1='(chroot) # '
</cli>

===== Swap File =====

  - Allocate space on COW filesystem (such as btrfs): <cli>
(chroot) # truncate -s 0 /swap
(chroot) # chattr +C /swap
(chroot) # fallocate -l 4G /swap
(chroot) # chmod 0600 /swap
</cli>
  - Set file as swap area: <cli>
(chroot) # mkswap /swap
(chroot) # swapon /swap
</cli>

===== System Settings =====

==== Filesystems ====

  - Configure crypttab: <file text /etc/crypttab>
luks-root UUID=00000000-0000-0000-0000-000000000002 none luks
</file>
  - Configure fstab: <file text /etc/fstab>
efivarfs /sys/firmware/efi/efivars efivarfs ro,nosuid,nodev,noexec,relatime 0 0
LABEL=ESP           /boot vfat  defaults,noatime,umask=0077 0 1
LABEL=LUKS-ROOT     /     btrfs defaults,noatime            0 0
/swap               none  swap  defaults                    0 0
</file>

==== Kernel Modules ====

  - Set blacklisted kernel modules on startup: <file text /etc/modprobe.d/blacklist.conf>
blacklist pcspkr
</file>

==== Console ====

  - Configure console keymap and font: <file text /etc/vconsole.conf>
KEYMAP=us
FONT=eurlatgr
</file>

==== Locales ====

  - Uncomment required locales: <file text /etc/locale.gen>
...
en_GB.UTF-8 UTF-8
en_GB ISO-8859-1
...
en_US.UTF-8 UTF-8
en_US ISO-8859-1
...
</file>
  - Generate locales: <cli>
(chroot) # locale-gen
</cli>
  - Set system locales: <file text /etc/locale.conf>
LANG="en_US.UTF-8"
LANGUAGE="en_GB:C"
LC_ADDRESS="en_US.UTF8"
LC_COLLATE="en_US.UTF-8"
LC_CTYPE="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_MEASUREMENT="en_GB.UTF8"
LC_NAME="en_US.UTF8"
LC_NUMERIC="en_US.UTF-8"
LC_PAPER="en_GB.UTF-8"
LC_TELEPHONE="en_US.UTF8"
LC_TIME="en_GB.UTF-8"
#LC_ALL=""
</file>

==== Hostname ====

  - Set hostname: <cli>
(chroot) # echo '<HOSTNAME>' > /etc/hostname
</cli>

==== Time ====

  - Set timezone: <cli>
(chroot) # ln -sf /usr/share/zoneinfo/UTC /etc/localtime
</cli>
  - Save current time to RTC: <cli>
(chroot) # hwclock --systohc
</cli>

==== Login Messages ====

  - Set login messages: <cli>
(chroot) # echo '' > /etc/issue
(chroot) # echo '' > /etc/motd
</cli>

==== Pacman ====

  - Configure package manager: <file text /etc/pacman.conf>
[options]
Architecture = auto
SigLevel = Required DatabaseOptional
LocalFileSigLevel = Optional
HookDir = /etc/pacman.d/hooks/
HoldPkg = base
IgnorePkg = nano emacs vi vim sudo dhclient
CheckSpace
VerbosePkgLists
Color
#ILoveCandy
ParallelDownloads = 5

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist

[multilib]
Include = /etc/pacman.d/mirrorlist
</file>

===== Minimal System Installation =====

  - Synchronize and update system: <cli>
(chroot) # pacman -Syyu
</cli>
  - Partitioning and filesystem tools: <cli>
(chroot) # pacman -S --needed parted dosfstools btrfs-progs
</cli>
  - Boot software: 
    - Kernel, initramfs and bootloader: <cli>
(chroot) # pacman -S --needed mkinitcpio linux [linux-lts] efibootmgr grub
</cli>
    - Additional firmware: <cli>
(chroot) # pacman -S --needed linux-firmware [amd-ucode|intel-ucode]
</cli>
  - Network tools: <cli>
(chroot) # pacman -S --needed ????????
</cli>

===== Booting =====

==== Initramfs ====

  - Configure initramfs: <file text /etc/mkinitcpio.conf>
MODULES=()
BINARIES=(btrfs)
FILES=()
HOOKS=(base udev keyboard autodetect modconf block keymap consolefont encrypt \
  filesystems fsck)
COMPRESSION='zstd'
COMPRESSION_OPTIONS=()
</file>
  - Re-generate initramfs for kernels: <cli>
(chroot) # mkinitcpio -P
</cli>

==== Bootloader ====

  - Install GRUB2 to ESP: <cli>
(chroot) # grub-install --target=x86_64-efi --efi-directory=/boot/ --removable
(chroot) # mount -o remount,rw /sys/firmware/efi/efivars/
(chroot) # grub-install --target=x86_64-efi --efi-directory=/boot/ --bootloader-id=GRUB
(chroot) # mount -o remount,ro /sys/firmware/efi/efivars/
</cli>
  - Configure GRUB2((GRUB2 config options: https://www.gnu.org/software/grub/manual/grub/html_node/Simple-configuration.html.)): <file text /etc/default/grub>
GRUB_DEFAULT='0'
GRUB_SAVEDEFAULT='false'
GRUB_TIMEOUT='-1'
GRUB_TIMEOUT_STYLE='menu'
GRUB_DISABLE_RECOVERY='true'
GRUB_TERMINAL_INPUT='console'
GRUB_GFXMODE='auto'
GRUB_GFXPAYLOAD_LINUX='text'
GRUB_ENABLE_CRYPTODISK='y'
GRUB_CMDLINE_LINUX=''
GRUB_CMDLINE_LINUX_DEFAULT='cryptdevice=LABEL=LUKS:luks-root net.ifnames=0 quiet'
GRUB_COLOR_NORMAL='white/black'
GRUB_COLOR_HIGHLIGHT='white/black'
</file>
  - Apply GRUB2 configuration changes: <cli>
(chroot) # grub-mkconfig -o /boot/grub/grub.cfg
</cli>

===== Finishing =====

  - Set root password: <cli>
(chroot) # passwd root
> <NEW-ROOT-PASSWORD>
> <NEW-ROOT-PASSWORD (VERIFY)>
</cli>
  - Reboot system: <cli>
(chroot) # exit
# reboot
</cli>